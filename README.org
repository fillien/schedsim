#+title: Schedsim
#+subtitle: A scheduling simulator with temporal isolation between threads

* Build the project
In order to build the project, some dependencies have to be installed :
 - [[https://cmake.org/][CMake]]
 - [[https://www.doxygen.nl/][Doxygen]]
 - [[https://babeltrace.org/][Babeltrace2]]
  
On a current Ubuntu LTS the project will build by installing the packages :
#+begin_src shell
sudo apt update && sudo apt install cmake doxygen babeltrace2
#+end_src

Now, clone the git repo and enter the directory to build the project :
#+begin_src shell
cmake -S . -B build
cmake --build build
#+end_src

Or to use Ninja :
#+begin_src shell
cmake -S . -B build -G Ninja
cmake --build build
#+end_src

You can now execute the compiled binary like this :
#+begin_src shell
./build/src/launch ./scenarios/simple.yml
#+end_src


* Usage
The simulator takes a scenario in input and produces a [[https://diamon.org/ctf/][CTF]] trace file and writes some logs to the standard output.

#+begin_src shell
$ ./build/src/launch ./scenarios/simple.yml 
==== Time 0 ====
0
-----------
[engine] handle [Event Id: 1, Type: JOB_ARRIVAL]
go to active cont
virtual time = 0
deadline = 4
1
-----------
[engine] handle [Event Id: 4, Type: RESCHED]
same task running
budget : 4
remaining time : 5
Simulation as finished
Logs :
[t=0] Task      1 JOB_ARRIVAL             0
[t=0] Server    1 SERV_ACT_CONT           0
[t=0]           0 RESCHED                 0
[t=0]           0 PROC_ACTIVATED          0
[t=0] Server    1 SERV_RUNNING            0
[t=0] Task      1 TASK_SCHEDULED          0
[t=0] Server    1 SERV_BUDGET_REPLENISHED 4
[t=0]           0 SIM_FINISHED            0
#+end_src

To simulate a scenario, pass the scenario file as the first argument of the simulator. A little stock of scenarios are available in the =./scenarios/= directory. You can use these to test the simulator and create new scenarios.

A scenario file is structured in the [[https://yaml.org/][YAML format]] and looks like this :
#+begin_src yaml
cores: 1
tasks:
  - id: 1
    period: 8
    utilization: 0.5
    jobs:
      - arrival: 0
        duration: 2

      - arrival: 5
        duration: 2

  - id: 2
    period: 12
    utilization: 0.25
    jobs:
      - arrival: 1
        duration: 4
        
      - arrival: 8
        duration: 3
#+end_src

Two nodes are necessary :
 - =cores= : The number of cores of the platform you want to simulate.
 - =tasks= : A list of tasks that will be accepted during the simulation.

A task is defined in four nodes :
 - =id= : The unique identifier
 - =period= : The period of the server associated with this task.
 - =utilization= : The utilization part of this task.
 - =jobs= : A list with all the job's arrival dates and durations.

Curently, there is no error detection of the scenario file syntax, so you have to cover yourself :D .

* Documentation
The documentation can be compiled using CMake and Doxygen like this :
#+begin_src shell
cmake --build build -t doxygen
#+end_src

Now open the documentation index page in your web browser :
#+begin_src shell
xdg-open ./doc/html/index.html
#+end_src


* Change trace points with Barectf
To trace the simulation, Barectf is used to generator CTF formatted stream ready to be decoded by Trace Compass. To compile the simulator, Barectf library has to be generated. A YAML config file is joined in the sources. It will be used to generate the library : 
#+BEGIN_SRC shell
  $ barectf generate --metadata-dir=trace config.yaml
#+END_SRC

The command will generate three files :
 - =barectf.c=
 - =barectf.h=
 - =barectf-bitfield.h=

Now the simulator can be compiled with the newly generated =barectf.c= file and the platform descriptor =barectf-plateform-simulator.c=.
#+BEGIN_SRC shell
  cmake -S . -B build -G Ninja
  cmake --build build
#+END_SRC

After compilation, the simulator can be launched and the trace analyse with Babeltrace2 or Trace Compass : 
#+BEGIN_SRC  shell
  $ ./build/src/launch
  $ babeltrace2 trace
#+END_SRC
